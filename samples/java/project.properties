# -------------------------------------------------------------------
# Copyright 2005-2006 Vincent Massol
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
#  
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -------------------------------------------------------------------

# TODO: To avoid XML parser issues with embedded Tomcat tests, avoid forking.
# See http://jira.codehaus.org/browse/CARGO-310#action_70330 for more details. Basically it's a bug
# in JAXP. This problem of JAXP happens when no context classloader is set. JAXP API searches for
# META-INF/services/javax.xml.parser.... by using the SYSTEM classloader, but when it tries to
# actually load this class, it does so by using BOOTSTRAP classloader.
# So what was happening is that...
#
# 1. Maven folks tests in a separate VM, launching this with Xerces in the system classloader
# 2. test starts, and Tomcat starts running in this container
# 3. when Tomcat tries to create WebappLoader, it just so happens that the context classloader is
#    not set.
# 4. JAXP finds META-INF/services entry from Xerces in the system classloader
# 5. but it tries to load this from the bootstrap classloader, where it fails
#
# Kohsuke has already talked to the JAXP team and have the fix committed.
# In the meantime we need to set forking to false.
maven.junit.fork = no

# Properties for which you wish to change the value should be defined in your build.properties 
# file or passed on the command line. Everything defined as such will take precedence over the 
# values found here. 
#
# For example, using the command line, you would write the following to execute the tests only on
# the Resin 3.x container: 
#   maven -Dcargo.containers=resin3x 
#
# The build.properties file can be located in 2 places:
# - the same directory as this file
# - in your home directory (~userhome/build.properties)
#
# For example if you only wish to execute tests on the resin3x container you will write in your 
# build.properties file:
#   cargo.containers = resin3x
#
# Note that you may also want to create build.properties files for the other 'samples'
# subprojects, samples/maven and samples/ant

# Default list of containers to run on. If you want to shorten or change the execution of
# 'samples', simply specify a shorter list of containers in your build.properties file or on the
# command line.
cargo.containers = resin3x, orion2x, tomcat5x, jetty6x
